name: Check

on:
  # Trigger the workflow on pushes to only the 'master', 'support' and 'release' branches
  push:
    branches:
      - master
      - support/*
      - release/*
  # Trigger the workflow on any pull request
  pull_request:
    types: [ opened, reopened ]
  # Trigger the workflow on manual dispatch
  workflow_dispatch:

jobs:
  check:

    runs-on: ubuntu-latest

    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.1.1

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4.0.1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

  draft:
    name: Create a release
    runs-on: ubuntu-latest
    needs: [ check ]
    if: ${{ github.ref_name == 'master' }}
    permissions:
      contents: write
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      # Generate a changelog for the new release using Git
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v3.0.2
        id: git-cliff
        with:
          config: cliff.toml # The configuration file for git-cliff
          args: -vv --latest --strip all # Show verbose output, grab the latest changes, and strip unnecessary details
        env:
          OUTPUT: CHANGES.md # The output file for the changelog

      # Prepare release notes by processing the generated changelog
      - name: Set the release notes
        id: release
        shell: bash
        run: |
          version=$(git tag --sort=-creatordate --format='%(refname:short)' | grep -E '^v([0-9]+\.){2}([0-9]+)(-([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?$' | head -n 1)
          echo "version=${version}" >> $GITHUB_OUTPUT

          # Read contents of changelog into variable 'changelog_content'
          changelog=$(cat ${{ steps.git-cliff.outputs.changelog }})
          # Remove first two lines from 'changelog'
          changelog="$(printf "$changelog" | tail -n +3)"
          # Save the value of 'changelog' back into the GitHub environment output
          {
              echo "notes<<EOF"
              echo "$changelog"
              echo "EOF"
          } >> $GITHUB_OUTPUT

      # Create a new GitHub release using the gathered information
      - name: Create the release
        uses: nekofar/create-github-release@v1.0.14
        with:
          tag: ${{ steps.release.outputs.version }} # The name of the tag to be released
          title: ${{ steps.release.outputs.version }} # The title for the release
          notes: ${{ steps.release.outputs.notes }} # The release notes generated in the previous step
          draft: true # The release will be created as a draft
          prerelease: ${{ contains(steps.release.outputs.version, '-rc') || contains(steps.release.outputs.version, '-beta') || contains(steps.release.outputs.version, '-alpha') }} # Conditions to mark the release as a pre-release

concurrency: # Allows controlling the concurrency level of the job in the build pipeline.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # If enabled, previous runs of this workflow for the same group-key will be cancelled while this build or run is in progress.
